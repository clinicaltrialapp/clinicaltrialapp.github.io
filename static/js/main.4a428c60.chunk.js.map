{"version":3,"sources":["components/context/image-context.js","components/Landing.js","components/Cropper.js","components/CropDialog.js","components/Crop.js","components/DiseaseSelector.js","components/UploadDialog.js","components/SuccessDialog.js","components/Cancel.js","components/Upload.js","App.js","serviceWorker.js","index.js","firebase.config.js"],"names":["ImageContext","createContext","useStyles","makeStyles","theme","root","margin","spacing","input","display","Landing","history","useHistory","useContext","imgSrc","setImgSrc","setHasCropped","hasCropped","classes","useEffect","push","ImageSetter","result","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","readAsDataURL","Fragment","className","style","textAlign","paddingTop","padding","color","fontSize","marginTop","marginBottom","accept","id","type","onChange","capture","htmlFor","Button","variant","component","Cropper","props","useState","imgRef","setImgRef","unit","x","y","width","height","aspect","crop","setCrop","onLoad","useCallback","img","makeClientCrop","croppedImageUrl","getCroppedImg","setResult","image","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","toDataURL","src","onImageLoaded","c","onComplete","Transition","React","forwardRef","ref","Slide","direction","CropDialog","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","paddingBottom","paddingLeft","paddingRight","fontColor","fontWeight","flexGrow","menuButton","marginRight","title","Crop","setOpen","AppBar","position","backgroundColor","Toolbar","IconButton","edge","aria-label","onClick","goBack","Typography","GetDiseases","uri","a","async","fetch","response","json","diseases_json","map","disease","String","toUpperCase","Set","sort","DiseaseSelector","diseases","setDiseases","loading","active","Autocomplete","freeSolo","getOptionSelected","option","value","getOptionLabel","options","onInputChange","v","onDiseaseChange","renderInput","params","TextField","label","fullWidth","InputProps","endAdornment","CircularProgress","size","marginLeft","UploadDialog","disableBackdropClick","disableEscapeKeyDown","SuccessDialog","isOpen","successClose","DialogActions","autoFocus","Cancel","Base64MimeType","encoded","mime","match","GetCurrentAppUser","user","firebase","auth","currentUser","email","Upload","setDisease","success","setSuccess","Container","alt","trim","disease_selected","upload_dir","file_name","Date","now","contentType","storage","child","putString","upload_task","state","Error","console","error","App","routes","path","exact","to","Provider","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","getElementById","URL","process","href","origin","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4a428c60.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const ImageContext = createContext(null);","import React, { useEffect, useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { ImageContext } from './context/image-context';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    input: {\r\n      display: 'none',\r\n    },\r\n}));\r\n\r\nconst Landing = () => {\r\n    const history = useHistory();\r\n\r\n    // eslint-disable-next-line\r\n    const {imgSrc, setImgSrc, hasCropped, setHasCropped} = useContext(ImageContext);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const Entry = () => {\r\n            setImgSrc(null);\r\n            setHasCropped(false);\r\n        }\r\n        Entry();\r\n    }, [setImgSrc, setHasCropped]);\r\n\r\n    useEffect(() => {\r\n        if (imgSrc) {\r\n            history.push(\"/crop\");;\r\n        }\r\n    }, [imgSrc, history]);\r\n    \r\n    const ImageSetter = (result) => {\r\n        setImgSrc(result);\r\n    }\r\n\r\n    const onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            const reader = new FileReader();\r\n            ImageSetter(null);\r\n            reader.addEventListener(\"load\", () => {\r\n                ImageSetter(reader.result);\r\n            });\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"center\" style={{ textAlign: \"center\", paddingTop: \"100px\" }}>\r\n                <div className=\"center\" style={{ textAlign: \"center\", padding: \"30px\", color: \"#808080\", fontSize: \"20px\" }}>\r\n                    <p>This app is meant to collect images for clinical trial purposes only.</p>\r\n                    <p>Click on button below, crop affected part, choose disease or name a new disease and upload</p>\r\n                </div>\r\n                <div style={{ marginTop: \"30px\", marginBottom: \"30px\"}}>\r\n                    <input\r\n                        accept=\"image/*\"\r\n                        className={classes.input}\r\n                        id=\"outlined-button-camera\"\r\n                        type=\"file\"\r\n                        onChange={onSelectFile}\r\n                        capture\r\n                    />\r\n                    <label htmlFor=\"outlined-button-camera\">\r\n                        <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                            <PhotoCamera /> &nbsp; CAMERA\r\n                        </Button>\r\n                    </label>\r\n                </div>\r\n                <div style={{ marginTop: \"50px\", marginBottom: \"30px\" }}>\r\n                    <input\r\n                        accept=\"image/*\"\r\n                        className={classes.input}\r\n                        id=\"outlined-button-file\"\r\n                        type=\"file\"\r\n                        onChange={onSelectFile}\r\n                    />\r\n                    <label htmlFor=\"outlined-button-file\">\r\n                        <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                            <FileCopyIcon /> &nbsp; CHOOSE IMAGE\r\n                        </Button>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Landing;\r\n","import React, { useState, useCallback, useContext } from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport { ImageContext } from './context/image-context';\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\n\r\nconst Cropper = props => {\r\n  // eslint-disable-next-line\r\n  const { imgSrc, setImgSrc } = useContext(ImageContext);\r\n  const [imgRef, setImgRef] = useState(null);\r\n  const [crop, setCrop] = useState({\r\n    unit: '%',\r\n    x: 12.5,\r\n    y: 12.5,\r\n    width: 50,\r\n    height: 50,\r\n    // Cropping Occurs in 1:1 Aspect Ratio\r\n    aspect: 1 / 1\r\n  });\r\n\r\n  const onLoad = useCallback(img => {\r\n    setImgRef(img);\r\n  }, []);\r\n\r\n  const makeClientCrop = crop => {\r\n    if (imgRef && crop.width && crop.height) {\r\n      const croppedImageUrl = getCroppedImg(imgRef, crop);\r\n      props.setResult(croppedImageUrl);\r\n    }\r\n  };\r\n\r\n  const getCroppedImg = (image, crop) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    return canvas.toDataURL(\"image/jpeg\");\r\n  };\r\n\r\n  makeClientCrop(crop);\r\n\r\n  return (\r\n    <div>\r\n      <ReactCrop\r\n        src={imgSrc}\r\n        onImageLoaded={onLoad}\r\n        crop={crop}\r\n        onChange={c => setCrop(c)}\r\n        onComplete={makeClientCrop}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cropper;","import React from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CropIcon from '@material-ui/icons/Crop';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst CropDialog = props => {\r\n    const { open, handleClose } = props;\r\n    \r\n    return (\r\n        <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <div style={{ \r\n                    paddingTop: \"50px\",\r\n                    paddingBottom: \"50px\",\r\n                    paddingLeft: \"20px\",\r\n                    paddingRight: \"20px\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"100px\",\r\n                    fontColor: \"black\" \r\n                }}>\r\n                <CropIcon \r\n                    color='inherit'\r\n                    fontSize='inherit'\r\n                />\r\n                <h5 style={{ \r\n                    margin: \"0px\",\r\n                    paddingTop: \"4px\",\r\n                    paddingLeft: \"20px\",\r\n                    fontSize: \"20px\",\r\n                    fontWeight: \"500\" \r\n                }}>Pinch to Crop the Image to Highlight Affected Area</h5>\r\n            </div>\r\n            </Dialog>\r\n    );\r\n}\r\n\r\nexport default CropDialog;","import React, { useState, useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { ImageContext } from './context/image-context';\r\nimport Cropper from './Cropper';\r\nimport CropDialog from './CropDialog';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst Crop = () => {\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n\r\n    // eslint-disable-next-line\r\n    const {imgSrc, setImgSrc} = useContext(ImageContext);\r\n\r\n    // eslint-disable-next-line\r\n    const {hasCropped, setHasCropped} = useContext(ImageContext);\r\n    \r\n    const [result, setResult] = useState();\r\n\r\n\r\n    const goBackHandler = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    const cropHandler = () => {\r\n        if (result) {\r\n            setImgSrc(result);\r\n        }\r\n        setHasCropped(true);\r\n        history.push(\"/upload\");\r\n    }\r\n    const [open, setOpen] = useState(true);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <CropDialog open={open} handleClose={handleClose} />\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" style={{ backgroundColor: \"#303030\" }}>\r\n                    <Toolbar>\r\n                    \r\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={goBackHandler}>\r\n                            <ArrowBackIcon />\r\n                        </IconButton>\r\n                    \r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        \r\n                    </Typography>\r\n                    {result && (\r\n                        <Button color=\"inherit\" onClick={cropHandler}>CROP</Button>\r\n                    )}\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n            <div style={{ backgroundColor: \"black\", height: \"100vh\" }}>\r\n                <Cropper result={result} setResult={setResult} />\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Crop;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\n/* eslint-disable no-use-before-define */\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nasync function GetDiseases(uri) {\r\n  const response = await fetch(uri);\r\n  let diseases_json = await response.json();\r\n  diseases_json = diseases_json.map(disease => { return String(disease).toUpperCase(); });\r\n  diseases_json = [...new Set(diseases_json)];\r\n  diseases_json = diseases_json.sort();\r\n  return diseases_json;\r\n}\r\n\r\nconst DiseaseSelector = props => {\r\n  const [diseases, setDiseases] = useState([]);\r\n  const loading = diseases.length === 0;\r\n  const uri = props.uri;\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n\r\n    (async () => {\r\n      // Fetch Diseases from URI\r\n      // Ensures they are all in\r\n      // Upper Case\r\n      // And Sorted in Alphabetical Order\r\n      const diseases_json = await GetDiseases(uri);\r\n      if (active) {\r\n        setDiseases(diseases_json);\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading, uri]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"disease-select\"\r\n      style={{ width: 300, display: \"inline-block\" }}\r\n      freeSolo\r\n      getOptionSelected={(option, value) => option === value}\r\n      getOptionLabel={option => option}\r\n      options={diseases}\r\n      loading={loading}\r\n      onInputChange={(e, v) => props.onDiseaseChange(v)}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Select Disease\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nexport default DiseaseSelector;","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n    padding: \"20px\"\r\n  },\r\n}));\r\n\r\nconst UploadDialog = props => {\r\n    const classes = useStyles();\r\n    const { open } = props;\r\n    \r\n    return (\r\n        <Dialog \r\n            disableBackdropClick={true}\r\n            disableEscapeKeyDown={true}\r\n            open={open}>\r\n            <div className={classes.root}>\r\n                <CircularProgress /> \r\n                <h5 style={{ \r\n                    margin: \"0px\",\r\n                    paddingTop: \"4px\",\r\n                    paddingLeft: \"20px\",\r\n                    fontSize: \"20px\",\r\n                    fontWeight: \"500\" \r\n                }}>\r\n                    Uploading Image\r\n                </h5>   \r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default UploadDialog;","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport BeenhereIcon from '@material-ui/icons/Beenhere';\r\n\r\nconst SuccessDialog = props => {\r\n    const { isOpen, successClose } = props;\r\n    \r\n    return (\r\n        <Dialog \r\n            disableBackdropClick={true}\r\n            disableEscapeKeyDown={true}\r\n            open={isOpen}>\r\n            <div style={{ \r\n                    paddingTop: \"50px\",\r\n                    paddingBottom: \"50px\",\r\n                    paddingLeft: \"20px\",\r\n                    paddingRight: \"20px\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"100px\" \r\n                }}>\r\n                <BeenhereIcon \r\n                    color='primary'\r\n                    fontSize='inherit'\r\n                />\r\n                <h5 style={{ \r\n                    margin: \"0px\",\r\n                    paddingTop: \"4px\",\r\n                    paddingLeft: \"20px\",\r\n                    fontSize: \"20px\",\r\n                    fontWeight: \"500\" \r\n                }}>Image Uploaded Successfully</h5>\r\n            </div>\r\n            <DialogActions>\r\n                <Button onClick={successClose} style={{ fontSize: \"15px\" }} color=\"primary\" autoFocus>\r\n                    OK\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default SuccessDialog;","import React, { useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ImageContext } from './context/image-context';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nconst Cancel = () => {\r\n    // eslint-disable-next-line\r\n    const {imgSrc, setImgSrc, hasCropped, setHasCropped} = useContext(ImageContext);\r\n    let history = useHistory();\r\n    const CancelHandler = () => {\r\n        setImgSrc(null);\r\n        setHasCropped(false);\r\n        history.push(\"/\");\r\n    }\r\n    return (\r\n        <Button\r\n            onClick={CancelHandler}\r\n            variant=\"contained\"\r\n            color='secondary'\r\n            component=\"span\"\r\n            style={{ marginTop: \"30px\" }}\r\n        >\r\n            <ClearIcon /> &nbsp; CANCEL\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default Cancel;","import React, { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ImageContext } from \"./context/image-context\";\r\nimport DiseaseSelector from \"./DiseaseSelector\";\r\nimport UploadDialog from \"./UploadDialog\";\r\nimport SuccessDialog from \"./SuccessDialog\";\r\nimport Cancel from \"./Cancel\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\nimport firebase from \"firebase/app\";\r\nimport 'firebase/storage';\r\nimport 'firebase/auth';\r\n\r\nfunction Base64MimeType(encoded) {\r\n  if (typeof encoded !== \"string\") {\r\n    return null;\r\n  }\r\n  var mime = encoded.match(/data:([a-zA-Z0-9]+\\/[a-zA-Z0-9-.+]+).*,.*/);\r\n  if (mime && mime.length) {\r\n    return mime[1];\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction GetCurrentAppUser() {\r\n  const user = firebase.auth().currentUser;\r\n  if (user == null)\r\n    return \"user\";\r\n  const email = user.email;\r\n  if (email == null || email === \"\")\r\n    return \"user\";\r\n  return email;\r\n}\r\n\r\nconst Upload = () => {\r\n  let history = useHistory();\r\n\r\n  // eslint-disable-next-line\r\n  const { imgSrc, setImgSrc, hasCropped, setHasCropped } = useContext(ImageContext);\r\n\r\n  // eslint-disable-next-line\r\n  const [disease, setDisease] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const successClose = () => {\r\n    setSuccess(false);\r\n    setHasCropped(false);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const successOpen = () => {\r\n    setSuccess(true);\r\n  };\r\n\r\n  async function UploadHandler() {\r\n    if (imgSrc == null || disease == null || disease.trim() === \"\") return; //TODO: Error\r\n    try {\r\n      handleOpen();\r\n\r\n      const disease_selected = String(disease).trim();\r\n      const upload_dir = \"images/\" + disease_selected + \"/\";\r\n\r\n      const user = GetCurrentAppUser();\r\n      const file_name = Date.now() + \"_\" + user;\r\n\r\n      const contentType = Base64MimeType(imgSrc);\r\n\r\n      const upload_task = await firebase\r\n        .storage()\r\n        .ref(upload_dir)\r\n        .child(file_name)\r\n        .putString(imgSrc, \"data_url\", { contentType: contentType });\r\n\r\n      handleClose();\r\n      if (upload_task.state === \"success\")\r\n        successOpen();\r\n      else {\r\n        throw new Error(\"Failed \" + upload_task.state);\r\n      }\r\n    } catch (err) {\r\n      handleClose();\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <UploadDialog open={open} />\r\n      <SuccessDialog isOpen={success} successClose={successClose} />\r\n      <Container style={{ marginTop: \"20%\", textAlign: \"center\" }}>\r\n        <img\r\n          src={imgSrc}\r\n          alt=\"Crop\"\r\n          style={{ width: \"50%\", height: \"50%\" }}\r\n        />\r\n        <div className=\"center\" style={{ color: \"#808080\", fontSize: \"20px\" }}>\r\n          <p>Write or select disease name.</p>\r\n        </div>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <DiseaseSelector uri=\"/diseases.json\" onDiseaseChange={setDisease} />\r\n        </div>\r\n        <Button\r\n          onClick={UploadHandler}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          component=\"span\"\r\n          style={{ marginTop: \"5%\" }}\r\n        >\r\n          <PublishIcon /> &nbsp; UPLOAD IMAGE\r\n        </Button>\r\n        <div>\r\n          <Cancel />\r\n        </div>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Upload;\r\n","import React, { useState } from 'react';\r\nimport { \r\n  HashRouter as Router, \r\n  Route, \r\n  Redirect, \r\n  Switch \r\n} from 'react-router-dom';\r\n\r\nimport { ImageContext } from './components/context/image-context';\r\nimport Landing from './components/Landing';\r\nimport Crop from './components/Crop';\r\nimport Upload from './components/Upload';\r\n\r\n\r\n\r\nconst App = () => {\r\n  const [imgSrc, setImgSrc] = useState(null);\r\n  const [hasCropped, setHasCropped] = useState(false);\r\n  let routes;\r\n\r\n  if (imgSrc && hasCropped) {\r\n    routes = (\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Landing />\r\n        </Route>\r\n        <Route path=\"/upload\" exact>\r\n          <Upload />\r\n        </Route>\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    )\r\n  } else if (imgSrc) {\r\n    routes = (\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Landing />\r\n        </Route>\r\n        <Route path=\"/crop\" exact>\r\n          <Crop />\r\n        </Route>\r\n        <Route path=\"/upload\" exact>\r\n          <Upload />\r\n        </Route>\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    )\r\n  } else {\r\n    routes = (\r\n      <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Landing />\r\n          </Route>\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n    )\r\n  }\r\n  \r\n  return (\r\n    <Router>\r\n      <ImageContext.Provider value={{ imgSrc, setImgSrc, hasCropped, setHasCropped }}>\r\n        {routes}\r\n      </ImageContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport firebase from \"firebase/app\";\r\nimport { firebaseConfig as FirebaseConfig } from \"./firebase.config\";\r\nfirebase.initializeApp(FirebaseConfig);\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","// This given key is public\r\n// https://stackoverflow.com/questions/37482366/is-it-safe-to-expose-firebase-apikey-to-the-public\r\n// In order to secure it, please refer to\r\n// https://stackoverflow.com/questions/35418143/how-to-restrict-firebase-data-modification\r\n\r\nexport const firebaseConfig = {\r\n  apiKey:\r\n    \"AIzaSyBOeReZ_pUp_Dq0tfc_jxJmGIOdkxkOz5Q\",\r\n  authDomain:\r\n    \"skinzyimageupload.firebaseapp.com\",\r\n  databaseURL:\r\n    \"https://skinzyimageupload.firebaseio.com\",\r\n  projectId:\r\n    \"skinzyimageupload\",\r\n  storageBucket:\r\n    \"skinzyimageupload.appspot.com\",\r\n  messagingSenderId:\r\n    \"1031661596743\",\r\n  appId:\r\n    \"1:1031661596743:web:ca7b799a150c172dde4162\",\r\n  measurementId:\r\n    \"G-LQL5RCYG9M\"\r\n};;\r\n"],"sourceRoot":""}